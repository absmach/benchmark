#!benchDL

#######
# Scenario:
# A single subscriber reading from "channels/<MF_CHANNEL_ID>/messages/#" topic
# 10000 publisher publishing to exclusive topic "channels/<MF_CHANNEL_ID>/messages/<client_id>"
# Overall msg rate: 10 000 msg/s
# Message size: 100 random bytes
# Running time: 5 min
# QoS level: 2
# NOTE: Update values in defaults or set environment variables according to your values
# <MF_MQTT_ENPOINT> = IP/domain of your MQTT endpoint
# <MF_THING_1_ID> = First thing ID of pre-provisioned Mainflux thing
# <MF_THING_1_KEY> = First thing key of pre-provisioned Mainflux thing
# <MF_THING_2_ID> = Second thing ID of pre-provisioned Mainflux thing
# <MF_THING_2_KEY> = Second thing key of pre-provisioned Mainflux thing.
# <MF_CHANNEL_ID> = pre-provisioned channel id where things are connected
#######

defaults(
        "PUB_NUM" = 10000,
        "PUB_TIME" = 5,
        "PUB_RATE" = 1,
        "MSG_SIZE" = 100,
        "QOS" = 2,
        "MF_MQTT_ENDPOINT" = "127.0.0.1",
        "MF_MQTT_PORT" = 1883,
        "MF_THING_1_ID" = "<MF_THING_1_ID>",
        "MF_THING_1_KEY" = "<MF_THING_1_KEY>",
        "MF_THING_2_ID" = "<MF_THING_2_ID>",
        "MF_THING_2_KEY" = "<MF_THING_2_KEY>",
        "MF_CHANNEL_ID" = "<MF_CHANNEL_ID>"
)

make_install(git = "https://github.com/erlio/vmq_mzbench.git",
             branch = "master")

pool(size = 1,
     worker_type = mqtt_worker):
            connect([t(host, var("MF_MQTT_ENDPOINT")),
                    t(port, numvar("MF_MQTT_PORT")),
                    t(client,"subscriber1"),
                    t(clean_session,true),
                    t(keepalive_interval,60),
                    t(username, var("MF_THING_1_ID")),
                    t(password, var("MF_THING_1_KEY")),
                    t(proto_version,4), t(reconnect_timeout,4)
                    ])

            wait(1 sec)
            subscribe(sprintf("channels/~s/messages/#", [var("MF_CHANNEL_ID")]), numvar("QOS"))


pool(size = numvar("PUB_NUM"),
     worker_type = mqtt_worker,
     worker_start = poisson(numvar("PUB_NUM") rps)):
            connect([t(host, var("MF_MQTT_ENDPOINT")),
                    t(port, numvar("MF_MQTT_PORT")),
                    t(client,fixed_client_id("publisher", worker_id())),
                    t(clean_session,true),
                    t(keepalive_interval,60),
                    t(username, var("MF_THING_2_ID")),
                    t(password, var("MF_THING_2_KEY")),
                    t(proto_version,4), t(reconnect_timeout,4)
                    ])

            set_signal(connect1, 1)
            wait_signal(connect1, numvar("PUB_NUM"))
            wait(5 sec)
            loop(time = numvar("PUB_TIME") min, rate = numvar("PUB_RATE") rps):
                publish_to_self(sprintf("channels/~s/messages/", [var("MF_CHANNEL_ID")]), random_binary(numvar("MSG_SIZE")), numvar("QOS"))
            disconnect()
